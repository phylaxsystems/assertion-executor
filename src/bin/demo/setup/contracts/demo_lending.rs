//! # `demo_lending`
//!
//! The following contains a sample lending protocol vulnerable to reentrancy.
//! The protocol accepts eth deposits, withdrawal and borrowing.
//!
//! The assertion checks that our output balance is not more than our balance
//! deposited inside of the protocol.

use assertion_executor::{
    db::SharedDB,
    primitives::{
        Account,
        AccountInfo,
        Address,
        AssertionContract,
        BlockChanges,
        BlockEnv,
        Bytecode,
        TxEnv,
        TxKind,
        U256,
    },
    AssertionExecutor,
};

use revm::primitives::{
    bytes,
    fixed_bytes,
    keccak256,
    Bytes,
    FixedBytes,
};

/// Address of the lending contract
pub const LENDING_ADDRESS: Address = Address::new([2u8; 20]);
pub const LENDING_CODE: Bytes = bytes!("60806040526004361061007b5760003560e01c8063402d88831161004e578063402d888314610130578063c399ec8814610138578063c5ebeaec1461015a578063d0e30db01461017a57600080fd5b80630941cb3d1461008057806314a6bf0f146100bf57806327e235e3146100e15780632e1a7d4d1461010e575b600080fd5b34801561008c57600080fd5b506100ad61009b366004610549565b60016020526000908152604090205481565b60405190815260200160405180910390f35b3480156100cb57600080fd5b50336000908152600160205260409020546100ad565b3480156100ed57600080fd5b506100ad6100fc366004610549565b60006020819052908152604090205481565b34801561011a57600080fd5b5061012e610129366004610579565b610182565b005b61012e610276565b34801561014457600080fd5b50336000908152602081905260409020546100ad565b34801561016657600080fd5b5061012e610175366004610579565b61037d565b61012e6104a3565b3360009081526020819052604090205461019d9082906105a8565b3360008181526020819052604080822093909355915183908381818185875af1925050503d80600081146101ed576040519150601f19603f3d011682016040523d82523d6000602084013e6101f2565b606091505b505090508061023d5760405162461bcd60e51b815260206004820152601260248201527108cc2d2d8cac840e8de40e6cadcc8408aa8960731b60448201526064015b60405180910390fd5b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a25050565b600034116102bf5760405162461bcd60e51b8152602060048201526016602482015275135d5cdd081c995c185e481cdbdb5948185b5bdd5b9d60521b6044820152606401610234565b336000908152600160205260409020543411156103125760405162461bcd60e51b81526020600482015260116024820152700a4cae0c2f2d2dcce40e8dede40daeac6d607b1b6044820152606401610234565b3360009081526001602052604090205461032d9034906105a8565b33600081815260016020526040908190209290925590517f0516911bcc3a0a7412a44601057c0a0a1ec628bde049a84284bc428866534488906103739034815260200190565b60405180910390a2565b33600090815260208190526040812054600a9061039b9060096105c1565b6103a591906105d8565b604051909150600090339084908381818185875af1925050503d80600081146103ea576040519150601f19603f3d011682016040523d82523d6000602084013e6103ef565b606091505b50509050806104355760405162461bcd60e51b815260206004820152601260248201527108cc2d2d8cac840e8de40e6cadcc8408aa8960731b6044820152606401610234565b336000908152600160205260409020546104509084906105fa565b33600081815260016020526040908190209290925590517fac59582e5396aca512fa873a2047e7f4c80f8f55d4a06cb34a78a0187f62719f906104969086815260200190565b60405180910390a2505050565b600034116104eb5760405162461bcd60e51b815260206004820152601560248201527409aeae6e840c8cae0dee6d2e840e6dedaca408aa89605b1b6044820152606401610234565b336000908152602081905260409020546105069034906105fa565b3360008181526020818152604091829020939093555134815290917f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49101610373565b60006020828403121561055b57600080fd5b81356001600160a01b038116811461057257600080fd5b9392505050565b60006020828403121561058b57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105bb576105bb610592565b92915050565b80820281158282048414176105bb576105bb610592565b6000826105f557634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156105bb576105bb61059256fea2646970667358221220444ec89b44074d636dc5ba38af19ee6029cea30e0f957f60f24250b0a7997c6864736f6c634300081a0033");

pub fn lending_acct_info() -> AccountInfo {
    AccountInfo {
        balance: U256::from(0xBEEF),
        nonce: 0,
        code_hash: keccak256(LENDING_CODE),
        code: Some(Bytecode::LegacyRaw(LENDING_CODE)),
    }
}

pub fn lending_call() -> TxEnv {
    TxEnv {
        transact_to: TxKind::Call(LENDING_ADDRESS),
        data: fixed_bytes!("d0e30db0").into(),
        ..TxEnv::default()
    }
}

/// Deploys the fork test contract.
pub fn deploy_demo_lending(
    executor: &mut AssertionExecutor<SharedDB<5>>,
    block_changes: &mut BlockChanges,
) {
    // Fork test contract to block_changes
    block_changes.state_changes.insert(
        LENDING_ADDRESS,
        Account {
            info: lending_acct_info(),
            ..Default::default()
        },
    );

    // Deploy fork_test contract
    let transactions = vec![lending_call()];

    let mut fork_db = executor.db.fork();

    let env = BlockEnv {
        basefee: FixedBytes::new([0; 32]).into(),
        ..Default::default()
    };

    transactions
        .into_iter()
        .fold(block_changes, |block_changes, tx_env| {
            let changes = executor
                .execute_forked_tx(env.clone(), tx_env, &mut fork_db)
                .unwrap()
                .1;
            block_changes.state_changes.extend(changes);
            block_changes
        });
}

/// Constructor assertion bytecode
pub const LENDING_ASSERTION_CODE: Bytes = bytes!("");

pub fn lending_assertion() -> AssertionContract {
    AssertionContract {
        code: Bytecode::LegacyRaw(LENDING_ASSERTION_CODE),
        code_hash: keccak256(LENDING_ASSERTION_CODE),
        fn_selectors: vec![fixed_bytes!("d509b16c")],
    }
}
