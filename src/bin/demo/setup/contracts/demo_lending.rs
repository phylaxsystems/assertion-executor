//! # `demo_lending`
//!
//! The following contains a sample lending protocol vulnerable to reentrancy.
//! The protocol accepts eth deposits, withdrawal and borrowing.
//!
//! The assertion checks that our output balance is not more than our balance
//! deposited inside of the protocol.

use assertion_executor::{
    db::SharedDB,
    primitives::{
        uint,
        Account,
        AccountInfo,
        AccountStatus,
        Address,
        AssertionContract,
        BlockChanges,
        Bytecode,
        TxEnv,
        TxKind,
        U256,
    },
    AssertionExecutor,
};

use revm::primitives::{
    address,
    bytes,
    fixed_bytes,
    keccak256,
    Bytes,
};

/// Address of the lending contract
pub const LENDING_ADDRESS: Address = address!("118DD24a3b0D02F90D8896E242D3838B4D37c181");

/// Deployed bytecode of contract-mocks/src/DemoLending.sol:DemoLending
pub const LENDING_CODE: Bytes = bytes!("6080604052348015600f57600080fd5b5061061a8061001f6000396000f3fe60806040526004361061007b5760003560e01c8063402d88831161004e578063402d888314610130578063c399ec8814610138578063c5ebeaec1461015a578063d0e30db01461017a57600080fd5b80630941cb3d1461008057806314a6bf0f146100bf57806327e235e3146100e15780632e1a7d4d1461010e575b600080fd5b34801561008c57600080fd5b506100ad61009b366004610520565b60016020526000908152604090205481565b60405190815260200160405180910390f35b3480156100cb57600080fd5b50336000908152600160205260409020546100ad565b3480156100ed57600080fd5b506100ad6100fc366004610520565b60006020819052908152604090205481565b34801561011a57600080fd5b5061012e610129366004610550565b610182565b005b61012e61024d565b34801561014457600080fd5b50336000908152602081905260409020546100ad565b34801561016657600080fd5b5061012e610175366004610550565b610354565b61012e61047a565b604051600090339083908381818185875af1925050503d80600081146101c4576040519150601f19603f3d011682016040523d82523d6000602084013e6101c9565b606091505b50509050806102145760405162461bcd60e51b815260206004820152601260248201527108cc2d2d8cac840e8de40e6cadcc8408aa8960731b60448201526064015b60405180910390fd5b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a25050565b600034116102965760405162461bcd60e51b8152602060048201526016602482015275135d5cdd081c995c185e481cdbdb5948185b5bdd5b9d60521b604482015260640161020b565b336000908152600160205260409020543411156102e95760405162461bcd60e51b81526020600482015260116024820152700a4cae0c2f2d2dcce40e8dede40daeac6d607b1b604482015260640161020b565b3360009081526001602052604090205461030490349061057f565b33600081815260016020526040908190209290925590517f0516911bcc3a0a7412a44601057c0a0a1ec628bde049a84284bc4288665344889061034a9034815260200190565b60405180910390a2565b33600090815260208190526040812054600a90610372906009610598565b61037c91906105af565b604051909150600090339084908381818185875af1925050503d80600081146103c1576040519150601f19603f3d011682016040523d82523d6000602084013e6103c6565b606091505b505090508061040c5760405162461bcd60e51b815260206004820152601260248201527108cc2d2d8cac840e8de40e6cadcc8408aa8960731b604482015260640161020b565b336000908152600160205260409020546104279084906105d1565b33600081815260016020526040908190209290925590517fac59582e5396aca512fa873a2047e7f4c80f8f55d4a06cb34a78a0187f62719f9061046d9086815260200190565b60405180910390a2505050565b600034116104c25760405162461bcd60e51b815260206004820152601560248201527409aeae6e840c8cae0dee6d2e840e6dedaca408aa89605b1b604482015260640161020b565b336000908152602081905260409020546104dd9034906105d1565b3360008181526020818152604091829020939093555134815290917f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4910161034a565b60006020828403121561053257600080fd5b81356001600160a01b038116811461054957600080fd5b9392505050565b60006020828403121561056257600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561059257610592610569565b92915050565b808202811582820484141761059257610592610569565b6000826105cc57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156105925761059261056956fea26469706673582212208e4d42059474e1791ff614b10344e22a9d8cd076e0280da3bb05acc646d5ddb064736f6c63430008190033");

pub fn lending_acct_info() -> AccountInfo {
    AccountInfo {
        balance: U256::MAX,
        nonce: 0,
        code_hash: keccak256(LENDING_CODE),
        code: Some(Bytecode::LegacyRaw(LENDING_CODE)),
    }
}

pub fn lending_call_invalidative() -> TxEnv {
    TxEnv {
        transact_to: TxKind::Create,
        data: bytes!("60806040523473118dd24a3b0d02f90d8896e242d3838b4d37c181632e1a7d4d602f83670de0b6b3a76400006081565b6040518263ffffffff1660e01b8152600401604c91815260200190565b600060405180830381600087803b158015606557600080fd5b505af11580156078573d6000803e3d6000fd5b505050505060a7565b8082018082111560a157634e487b7160e01b600052601160045260246000fd5b92915050565b603f8060b46000396000f3fe6080604052600080fdfea2646970667358221220e43fbc2a652f02721df8672422ae04e2ea5bf5ec3b38139ec14145ffb273b64b64736f6c63430008190033"),
        value: uint!(10000000000000000000_U256),
        ..TxEnv::default()
    }
}

pub fn lending_call_valid() -> TxEnv {
    TxEnv {
        transact_to: TxKind::Create,
        data: bytes!("6080604052603f8060116000396000f3fe6080604052600080fdfea26469706673582212204218d98e4c98c70f0ec816e3e3a3accbe06687c57d73ddc5f00c71ad5d973f6f64736f6c63430008190033"),
        value: uint!(10000000000000000000_U256),
        ..TxEnv::default()
    }
}

/// Deploys the fork test contract.
pub fn deploy_demo_lending(
    _executor: &mut AssertionExecutor<SharedDB<5>>,
    block_changes: &mut BlockChanges,
) {
    // Fork test contract to block_changes
    block_changes.state_changes.insert(
        LENDING_ADDRESS,
        Account {
            info: lending_acct_info(),
            status: AccountStatus::Touched,
            ..Default::default()
        },
    );
}

/// Constructor assertion bytecode
pub const LENDING_ASSERTION_CODE: Bytes = bytes!("6080604052600080546001600160a01b031916734461812e00718ff8d80929e3bf595aeaaa7b881e179055600d805460ff199081166001908117909255602080549091169091179055348015605357600080fd5b50610ee6806100636000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063916a17c61161008c578063ba414fa611610066578063ba414fa614610166578063d509b16c1461017e578063e20c9f7114610188578063fa7626d41461019057600080fd5b8063916a17c614610141578063b0464fdc14610156578063b5508aa91461015e57600080fd5b80631ed7831c146100d45780632ade3880146100f25780633e5e3c23146101075780633f7286f41461010f57806366d9a9a01461011757806385226c811461012c575b600080fd5b6100dc61019d565b6040516100e99190610b41565b60405180910390f35b6100fa6101ff565b6040516100e99190610bd4565b6100dc610341565b6100dc6103a1565b61011f610401565b6040516100e99190610cda565b61013461056e565b6040516100e99190610d61565b61014961063e565b6040516100e99190610dc5565b610149610724565b61013461080a565b61016e6108da565b60405190151581526020016100e9565b61018661097e565b005b6100dc610ae1565b60205461016e9060ff1681565b606060178054806020026020016040519081016040528092919081815260200182805480156101f557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101d7575b5050505050905090565b6060601f805480602002602001604051908101604052809291908181526020016000905b8282101561033857600084815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101561032157838290600052602060002001805461029490610e36565b80601f01602080910402602001604051908101604052809291908181526020018280546102c090610e36565b801561030d5780601f106102e25761010080835404028352916020019161030d565b820191906000526020600020905b8154815290600101906020018083116102f057829003601f168201915b505050505081526020019060010190610275565b505050508152505081526020019060010190610223565b50505050905090565b606060198054806020026020016040519081016040528092919081815260200182805480156101f5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101d7575050505050905090565b606060188054806020026020016040519081016040528092919081815260200182805480156101f5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101d7575050505050905090565b6060601c805480602002602001604051908101604052809291908181526020016000905b82821015610338578382906000526020600020906002020160405180604001604052908160008201805461045890610e36565b80601f016020809104026020016040519081016040528092919081815260200182805461048490610e36565b80156104d15780601f106104a6576101008083540402835291602001916104d1565b820191906000526020600020905b8154815290600101906020018083116104b457829003601f168201915b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561055657602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116105185790505b50505050508152505081526020019060010190610425565b6060601b805480602002602001604051908101604052809291908181526020016000905b828210156103385783829060005260206000200180546105b190610e36565b80601f01602080910402602001604051908101604052809291908181526020018280546105dd90610e36565b801561062a5780601f106105ff5761010080835404028352916020019161062a565b820191906000526020600020905b81548152906001019060200180831161060d57829003601f168201915b505050505081526020019060010190610592565b6060601e805480602002602001604051908101604052809291908181526020016000905b828210156103385760008481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561070c57602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116106ce5790505b50505050508152505081526020019060010190610662565b6060601d805480602002602001604051908101604052809291908181526020016000905b828210156103385760008481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156107f257602002820191906000526020600020906000905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116107b45790505b50505050508152505081526020019060010190610748565b6060601a805480602002602001604051908101604052809291908181526020016000905b8282101561033857838290600052602060002001805461084d90610e36565b80601f016020809104026020016040519081016040528092919081815260200182805461087990610e36565b80156108c65780601f1061089b576101008083540402835291602001916108c6565b820191906000526020600020905b8154815290600101906020018083116108a957829003601f168201915b50505050508152602001906001019061082e565b60095460009060ff16156108f2575060095460ff1690565b604051630667f9d760e41b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190526519985a5b195960d21b602483015260009163667f9d7090604401602060405180830381865afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109779190610e70565b1415905090565b600080546040805163a09960eb60e01b8152905173454545454545454545454545454545454545454531936001600160a01b039093169263a09960eb926004808201939182900301818387803b1580156109d757600080fd5b505af11580156109eb573d6000803e3d6000fd5b50505050600073118dd24a3b0d02f90d8896e242d3838b4d37c1816001600160a01b03166314a6bf0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a679190610e70565b905073454545454545454545454545454545454545454531610a898382610e89565b821115610adc5760405162461bcd60e51b815260206004820152601860248201527f57697468647261773a204d6f7265207468616e20646562740000000000000000604482015260640160405180910390fd5b505050565b606060168054806020026020016040519081016040528092919081815260200182805480156101f5576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116101d7575050505050905090565b6020808252825182820181905260009190848201906040850190845b81811015610b825783516001600160a01b031683529284019291840191600101610b5d565b50909695505050505050565b6000815180845260005b81811015610bb457602081850181015186830182015201610b98565b506000602082860101526020601f19601f83011685010191505092915050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015610c8457603f198b8503018752825180516001600160a01b031685528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015610c6e57605f19898503018352610c5c848651610b8e565b948e01949350918d0191600101610c40565b505050978a019794505091880191600101610bfb565b50919a9950505050505050505050565b60008151808452602080850194506020840160005b83811015610ccf5781516001600160e01b03191687529582019590820190600101610ca9565b509495945050505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015610d5357888303603f1901855281518051878552610d2788860182610b8e565b91890151858303868b0152919050610d3f8183610c94565b968901969450505090860190600101610d03565b509098975050505050505050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015610db857603f19888603018452610da6858351610b8e565b94509285019290850190600101610d8a565b5092979650505050505050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b83811015610d5357888303603f19018552815180516001600160a01b03168452870151878401879052610e2387850182610c94565b9588019593505090860190600101610dee565b600181811c90821680610e4a57607f821691505b602082108103610e6a57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610e8257600080fd5b5051919050565b80820180821115610eaa57634e487b7160e01b600052601160045260246000fd5b9291505056fea264697066735822122059684a8849a1098710a4fb9d7d68b7fea8152e7821956458fda062bb7da829a064736f6c63430008190033");

pub fn lending_assertion() -> AssertionContract {
    AssertionContract {
        code: Bytecode::LegacyRaw(LENDING_ASSERTION_CODE),
        code_hash: keccak256(LENDING_ASSERTION_CODE),
        fn_selectors: vec![fixed_bytes!("d509b16c"), fixed_bytes!("874f33a1")],
    }
}
