#![cfg(any(test, feature = "test"))]

use crate::primitives::{
    AccountInfo,
    Address,
    AssertionContract,
    Bytecode,
    TxEnv,
    TxKind,
    U256,
};

use revm::primitives::{
    bytes,
    fixed_bytes,
    keccak256,
    Bytes,
    FixedBytes,
};

/// Deployed bytecode of contract-mocks/src/SimpleCounterAssertion.sol:Counter
pub const COUNTER_CODE : Bytes = bytes!("6080604052348015600f57600080fd5b506004361060325760003560e01c80638381f58a146037578063d09de08a146051575b600080fd5b603f60005481565b60405190815260200160405180910390f35b60576059565b005b600080549080606683606d565b9190505550565b600060018201608c57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e286ad6519f82d6863d59b6024c676007347de449fb04de9aa0b47e14513e85a64736f6c63430008190033");
pub const COUNTER_ADDRESS: Address = Address::new([1u8; 20]);

pub fn counter_call() -> TxEnv {
    TxEnv {
        transact_to: TxKind::Call(COUNTER_ADDRESS),
        data: fixed_bytes!("d09de08a").into(),
        ..TxEnv::default()
    }
}

pub fn counter_acct_info() -> AccountInfo {
    AccountInfo {
        balance: U256::ZERO,
        nonce: 1,
        code_hash: keccak256(COUNTER_CODE),
        code: Some(Bytecode::LegacyRaw(COUNTER_CODE)),
    }
}

/// Deployment bytecode of contract-mocks/src/SimpleCounterAssertion.sol:SimpleCounterAssertion
pub const SIMPLE_ASSERTION_COUNTER_CODE: Bytes = bytes!("6080604052348015600f57600080fd5b506102798061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806395eff8b51461003b578063c667b77f14610059575b600080fd5b610043610063565b60405161005091906101c7565b60405180910390f35b6100616100bc565b005b6040805160018082528183019092526060916020808301908036833701905050905063c667b77f60e01b816000815181106100a0576100a0610214565b6001600160e01b03199092166020928302919091019091015290565b60007301010101010101010101010101010101010101016001600160a01b0316638381f58a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610110573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610134919061022a565b90507f4ae04e69a0231afea063135ce5674a4dae0944c876f7806737af2c1885a8a19a8160405161016791815260200190565b60405180910390a160018111156101c45760405162461bcd60e51b815260206004820181905260248201527f436f756e7465722063616e6e6f742062652067726561746572207468616e2031604482015260640160405180910390fd5b50565b602080825282518282018190526000918401906040840190835b818110156102095783516001600160e01b0319168352602093840193909201916001016101e1565b509095945050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561023c57600080fd5b505191905056fea2646970667358221220049c0abfb28a0b5e3a5941fa976c15a3e60f92eceb88eac825eecfafbbbfe1ca64736f6c634300081a0033");

pub fn counter_assertion() -> AssertionContract {
    AssertionContract {
        code: Bytecode::LegacyRaw(SIMPLE_ASSERTION_COUNTER_CODE),
        code_hash: keccak256(SIMPLE_ASSERTION_COUNTER_CODE),
        fn_selectors: vec![fixed_bytes!("c667b77f")],
    }
}

pub const FN_SELECTOR_CODE: Bytes = bytes!("6080604052348015600f57600080fd5b506101e88061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631ff1bc3a1461005c57806395eff8b514610070578063c667b77f14610085578063d210b7cf1461005c578063e7f480381461005c575b600080fd5b604051600181526020015b60405180910390f35b610078610087565b604051610067919061014e565b005b6040805160038082526080820190925260609160208201838036833701905050905063d210b7cf60e01b816000815181106100c4576100c461019c565b6001600160e01b0319909216602092830291909101909101528051631cfe900760e31b90829060019081106100fb576100fb61019c565b6001600160e01b0319909216602092830291909101909101528051630ff8de1d60e11b90829060029081106101325761013261019c565b6001600160e01b03199092166020928302919091019091015290565b6020808252825182820181905260009190848201906040850190845b818110156101905783516001600160e01b0319168352928401929184019160010161016a565b50909695505050505050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122003fffc90a7730503b858d9523d4ee913af36aaf5207d2656c8933dcaa24c9a5e64736f6c63430008190033");

pub const BAD_FN_SELECTOR_CODE: Bytes = bytes!("6080604052348015600f57600080fd5b506101ed8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631ff1bc3a1461005157806395eff8b514610065578063d210b7cf14610051578063e7f4803814610051575b600080fd5b604051600181526020015b60405180910390f35b61006d61007b565b60405161005c929190610147565b604080516003808252608082019092526000916060919060208201838036833701905050905063d210b7cf60e01b816000815181106100bc576100bc6101a1565b6001600160e01b0319909216602092830291909101909101528051631cfe900760e31b90829060019081106100f3576100f36101a1565b6001600160e01b0319909216602092830291909101909101528051630ff8de1d60e11b908290600290811061012a5761012a6101a1565b6001600160e01b0319909216602092830291909101909101529091565b60006040820184835260206040602085015281855180845260608601915060208701935060005b818110156101945784516001600160e01b0319168352938301939183019160010161016e565b5090979650505050505050565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220552dcbb449c541d5d45d9c2a9731fbb1612984d5abdb56949e447a9205cd301664736f6c63430008190033");

pub fn selector_assertion() -> AssertionContract {
    AssertionContract {
        code: Bytecode::LegacyRaw(FN_SELECTOR_CODE),
        code_hash: keccak256(FN_SELECTOR_CODE),
        fn_selectors: vec![
            fixed_bytes!("d210b7cf"),
            fixed_bytes!("e7f48038"),
            fixed_bytes!("1ff1bc3a"),
        ],
    }
}

/// Returns a random FixedBytes of length N
pub fn random_bytes<const N: usize>() -> FixedBytes<N> {
    let mut value = [0u8; N];
    value.iter_mut().for_each(|x| *x = rand::random());
    FixedBytes::new(value)
}
